# Distributed under the MIT License.
# See LICENSE.txt for details.

# We derive from the SpECTRE build environment Docker image which contains all
# the dependencies that are needed to compile SpECTRE. Deriving off the build
# environment Docker image is substantially faster than installing compilers
# and other dependencies each time we run a build.
#
# The spectrebuildenv Docker image is generated using the Dockerfile.buildenv
# by running (as root):
# docker build  -t sxscollaboration/spectrebuildenv:latest \
#               -f ./spectre/containers/Dockerfile.buildenv .
#
# For those who are maintaining the build env, see that Dockerfile for
# instructions on pushing to the SXS collaboration DockerHub account.
FROM sxscollaboration/spectrebuildenv:latest

# All ARG variables are passed into Docker as a
# `--build-arg VARIABLE_NAME=VARIABLE_VALUE`
ARG COVERAGE=OFF
ARG CC
ARG CXX
ARG FC
ARG CHARM_CC
ARG CXXFLAGS
ARG BUILD_TYPE
ARG DOCUMENTATION_ONLY

# Environment variables used for test and documentation code coverage analysis
ARG TRAVIS_BRANCH
ARG TRAVIS_JOB_NUMBER
ARG TRAVIS_PULL_REQUEST
ARG TRAVIS_JOB_ID
ARG TRAVIS_TAG
ARG TRAVIS_REPO_SLUG
ARG TRAVIS_COMMIT
ARG TRAVIS_EVENT_TYPE
ARG TRAVIS_SECURE_ENV_VARS
ARG ENCRYPTED_KEY
ARG ENCRYPTED_IV
ARG GH_PAGES_REPO
ARG GH_PAGES_SOURCE_BRANCH
ARG COVERALLS_TOKEN
ARG RUN_CLANG_TIDY
ARG RUN_CPPCHECK
ARG RUN_IWYU
ARG USE_PCH
ARG UPSTREAM_REPO
ARG UPSTREAM_BRANCH
ARG CHARM_PATCH

# Copy the spectre repo from the TravisCI disk into the Docker image /work
# directory
COPY spectre /work/spectre

# We need the GitHub host added to known_hosts. It is safer to copy in the
# known_hosts from Travis than to add the REPO host automatically, since that
# could be changed to point anywhere.
RUN mkdir /root/.ssh
COPY known_hosts /root/.ssh/known_hosts

# Copy ccache from TravisCI cached data (we cache the ccache cache between
# builds) to the Docker image
COPY ccache /root/.ccache

# Create build directory
RUN mkdir /work/build_${BUILD_TYPE}_${CC}
WORKDIR /work/build_${BUILD_TYPE}_${CC}

RUN ccache -z

RUN bash -c ". /etc/profile.d/lmod.sh; \
    export PATH=$PATH:/work/spack/bin; \
    . /work/spack/share/spack/setup-env.sh; \
    spack load gsl; \
    spack load pkg-config; \
    spack load benchmark; \
    spack load blaze; \
    spack load brigand; \
    spack load catch; \
    spack load libxsmm; \
    spack load yaml-cpp; \
    cmake -D CMAKE_BUILD_TYPE=${BUILD_TYPE} \
          -D CMAKE_C_COMPILER=${CC} \
          -D CMAKE_CXX_COMPILER=${CXX} \
          -D CMAKE_CXX_FLAGS=\"${CXXFLAGS}\" \
          -D CMAKE_Fortran_COMPILER=${FC} \
          -D CHARM_ROOT=/work/charm/multicore-linux64-${CHARM_CC} \
          -D USE_CCACHE=ON \
          -D USE_PCH=${USE_PCH} \
          -D COVERAGE=${COVERAGE} \
          ../spectre/"

# Build all Charm++ modules
RUN make module_All

RUN if [ ${RUN_CPPCHECK} ]; then \
      make cppcheck; \
    fi

RUN if [ ${RUN_CLANG_TIDY} ]; then \
      /work/spectre/.travis/RunClangTidy.sh; \
    fi

RUN if [ ${RUN_IWYU} ]; then \
      /work/spectre/.travis/RunIncludeWhatYouUse.sh; \
    fi

# TravisCI currently has 2 cores for a job, so we build on 2.
RUN if [ -z "${RUN_CPPCHECK}" ] \
    && [ -z "${RUN_CLANG_TIDY}" ] \
    && [ -z "${RUN_IWYU}" ]; then \
      bash -c ". /etc/profile.d/lmod.sh; \
               export PATH=$PATH:/work/spack/bin; \
               . /work/spack/share/spack/setup-env.sh; \
               spack load gsl; \
               spack load pkg-config; \
               spack load benchmark; \
               spack load blaze; \
               spack load brigand; \
               spack load catch; \
               spack load libxsmm; \
               spack load yaml-cpp; \
               make test-executables \
                    $([ $BUILD_TYPE = Release ] && echo Benchmark) -j2 && \
               ccache -s && \
               ctest --output-on-failure"; \
    fi

# Check documentation output for warnings write to stdout and to file so we
# can search the file for warnings
RUN if [ "${CC}" = "gcc" ] \
    && [ $BUILD_TYPE = Debug ] \
    && [ -z "${RUN_CPPCHECK}" ] \
    && [ -z "${RUN_CLANG_TIDY}" ] \
    && [ -z "${RUN_IWYU}" ]; then \
      make doc | tee doxygen.log; \
      ! grep 'warning' ./doxygen.log; \
    fi

RUN if [ "${CHARM_CC}" = "gcc" ] \
    && [ -z "${RUN_CPPCHECK}" ] \
    && [ -z "${RUN_CLANG_TIDY}" ] \
    && [ -z "${RUN_IWYU}" ] \
    && [ ${COVERAGE} = ON ]; then \
    bash -c ". /etc/profile.d/lmod.sh; \
               export PATH=$PATH:/work/spack/bin; \
               . /work/spack/share/spack/setup-env.sh; \
               spack load gsl; \
               spack load blaze; \
               spack load brigand; \
               spack load catch; \
               spack load libxsmm; \
               spack load yaml-cpp; \
               make unit-test-coverage"; \
      if [ ${TRAVIS_SECURE_ENV_VARS} = true ]; then \
        cd /work/spectre; \
        coveralls-lcov -v --repo-token ${COVERALLS_TOKEN} /work/build_${BUILD_TYPE}_${CC}/tmp/coverage.info; \
        cd /work/build_${BUILD_TYPE}_${CC}; \
      fi; \
    else \
      touch /work/build_${BUILD_TYPE}_${CC}/tmp/coverage.info; \
    fi

# We use cron jobs to deploy to gh-pages
# Since this still runs all jobs we only actually build documentation
# for one job but let the others run tests, i.e.
# we add documentation only for one specific build matrix entry.
RUN if [ ${CC} = gcc ] \
    && [ -z "${RUN_CPPCHECK}" ] \
    && [ -z "${RUN_CLANG_TIDY}" ] \
    && [ -z "${RUN_IWYU}" ] \
    && [ ${TRAVIS_SECURE_ENV_VARS} = true ] \
    && [ ${COVERAGE} ] \
    && [ ${TRAVIS_BRANCH} = ${GH_PAGES_SOURCE_BRANCH} ] \
    && [ ${TRAVIS_PULL_REQUEST} = false ]; then \
      make doc-coverage; \

      # the encrypted key is created using:
      # travis encrypt-file -r sxs-collaboration/spectre deploy_key
      # See:
      # https://gist.github.com/domenic/ec8b0fc8ab45f39403dd
      # https://docs.travis-ci.com/user/encrypting-files/
      openssl aes-256-cbc -K $ENCRYPTED_KEY -iv $ENCRYPTED_IV \
              -in /work/spectre/.travis/deploy_key.enc \
              -out /root/.ssh/id_rsa -d; \
      chmod 600 /root/.ssh/id_rsa; \

      cd /work; \
      git clone "$GH_PAGES_REPO" gh-pages; \
    fi

# push documentation to GitHub pages
RUN if  [ -z "${RUN_CPPCHECK}" ] \
    && [ -z "${RUN_CLANG_TIDY}" ] \
    && [ -z "${RUN_IWYU}" ]; then \
      /work/spectre/.travis/TravisPushDocumentation.sh; \
    fi
